# def f(b,e):
#     if b == e:
#         return 1
#     if b>e or b == 59:
#         return 0
#     return f(b+1,e)+f(b*2,e)

# print(f(3,14)*f(14,62))


"""
Исполнитель преобразует число на экране.

У исполнителя есть две команды, которым присвоены номера.

1.  Прибавить 1.

2.  Умножить на 2.

Первая команда увеличивает число на экране на 1, вторая умножает его на 2.

Программа для исполнителя  — это последовательность команд. Например, если в начальный момент на экране находится число 1, 
то программа 212 последовательно преобразует его в 2, 3, 6.

Сколько существует программ, которые преобразуют исходное число 1 в число 60 так, что в процессе выполнения на экране ни разу не появляется цифра 5?
"""


# def f(b,e,h=''):
#     if b == e and '5' not in h:
#         return 1
#     if b>e or '5' in h:
#         return 0
#     return f(b+1, e, h+str(b+1)) + f(b*2, e, h+str(b*2))

# print(f(1,60))

"""
1.  Прибавить 1.

2.  Прибавить 2.

3.  Умножить на 2.

4.  Умножить на 3.

Первая команда увеличивает число на экране на 1, вторая увеличивает его на 2, третья умножает на 2, четвёртая умножает на 3.

Программа для исполнителя  — это последовательность команд. Например, если в начальный момент на экране находится число 1, 
то программа 213 последовательно преобразует его в 3, 4, 8.

Сколько существует программ, которые преобразуют исходное число 1 в число 10 и при этом содержат ровно одну команду умножения?
"""


def f(x,y, h = ''):
    if x == y and h.count('u')==1:
        return 1
    if x>y or h.count('u') > 1:
        return 0
    
    return f(x+1, y, h+'p')+f(x+2, y, h+'p')+f(x*2, y, h+'u')+f(x*3, y, h+'u')

print(f(1,10))

"""
Прибавить 1.

Прибавить 2.

Умножить на 2.

Первая команда увеличивает число на 1, вторая — на 2, третья — вдвое. Программа для исполнителя — это последовательность команд.

 

Сколько существует таких программ, которые исходное число 3 преобразуют в число 25 и при этом в программе есть все три команды?
"""

def f(b,e,h=''):
    if b==e and ("1" in h) and ("2" in h) and ("3" in h):
        return 1
    if b==e and (("1" not in h) or ("2" not in h) or ("3" in h)):
        return 0
    if b>e:
        return 0
    
    return f(b+1, e, h+"1")+f(b+2, e, h+"2")+f(b*2, e, h+"3")

print(f(3,25))

"""
У исполнителя есть четыре команды, которым присвоены номера.

1.  Прибавить 1.

2.  Прибавить 2.

3.  Умножить на 2.

4.  Умножить на 3.

Первая команда увеличивает число на экране на 1, вторая увеличивает его на 2, 
третья умножает на 2, четвёртая умножает на 3.

Программа для исполнителя  — это последовательность команд. Например, если в начальный момент на экране находится число 1, 
то программа 213 последовательно преобразует его в 3, 4, 8.

Сколько существует программ, которые преобразуют исходное число 1 в число 22 и при этом не содержат двух последовательных команд 
сложения и двух последовательных команд умножения?
"""

# def f(x,y, h = ''):
#     if x == y and ('uu' not in h) and ('pp' not in h):
#         return 1
#     if x>y or ('uu' in h) or ('pp' in h):
#         return 0
    
#     return f(x+1, y, h+'p')+f(x+2, y, h+'p')+f(x*2, y, h+'u')+f(x*3, y, h+'u')

# print(f(1,22))


"""
У исполнителя есть три команды, которым присвоены номера:
Прибавить значение старшего разряда.

Прибавить 3.

Сделать нечётным.

Первая команда увеличивает число на экране на величину первого разряда слева, 
вторая увеличивает это число на 3, третья переводит число

x в число 2x−1.

Программа для исполнителя — это последовательность команд.

Сколько существует программ, для которых при исходном числе 
42 результатом является число 89 и при этом траектория содержит число 73 и не содержит числа 81?
Траектория вычислений программы — это последовательность результатов
выполнения всех команд программы. Например, для программы 312 при исходном числе 7 траектория будет состоять из чисел 13, 14, 17.
"""

# def f(x,y):
#     if x==y:
#         return 1
#     if x>y or x == 81:
#         return 0
    
#     return f(x+3, y)+f(2*x-1,y)+f(int(str(x)[0])+x, y)

# print(f(42,73)*f(73,89))

"""

A. Прибавить 2.

B. Умножить на 3.

C. Возвести в куб.

 

Программа для исполнителя – это последовательность команд. Необходимо найти количество существующих программ, 
для которых при исходном числе 3 результатом является число 125, при этом траектория вычислений не содержит числа 27 и содержит не более 15 команд.
"""

# def f(x,y, r=[]):
#     if x==y and (not x==27) and len(r)<=15:
#         return 1
#     if x>y or (x==27) or len(r)>15:
#         return 0
    
#     return f(x+2, y, r+[x+2])+f(x*3, y, r+[x*3])+f(x**3, y,r+[x**3])

# print(f(3,125,[]))


"""
1.  Прибавить 1

2.  Умножить на 2

3.  Умножить на 3

 

Первая команда увеличивает число на экране на 1, вторая умножает его на 2, третья – умножает на 3.

Сколько существует программ, для которых при исходном числе 2 результатом является число 33 и 
при этом траектория вычислений содержит число 16 и не содержит числа 30?
"""


# def f(x, y):
#     if x > y or x == 30:
#         return 0
#     if x == y:
#         return 1
#     else:
#         return f(x + 1, y) + f(x * 2, y) + f(x * 3, y)
    

# print(f(2, 16) * f(16, 33))

"""
1.  Прибавить 1.

2.  Прибавить 2.

3.  Умножить на 2.

Первая команда увеличивает число на экране на 1, вторая увеличивает его на 2, третья умножает на 2.

Программа для исполнителя  — это последовательность команд. Сколько существует программ, 
которые преобразуют исходное число 1 в число 11 и при этом не содержат двух команд умножения подряд?"""

# def f(x,y,u=False):
#     if x == y:
#         return 1
#     if x>y:
#         return 0
    
#     if u:
#         return f(x+1, y,False)+f(x+2, y, False)
#     else:
#         return f(x+1, y,False)+f(x+2, y, False)+f(x*2,y,True)
    
# print(f(1,11))

"""У исполнителя есть три команды, которым присвоены номера:

 

A. Прибавить 2.

B. Прибавить 5.

C. Умножить на 2.

 

Программа для исполнителя — это последовательность команд.

Сколько существует программ, для которых при исходном числе 8 результатом является число 40, а последняя в них команда — A или B?"""


def f(x,y,latest=''):
    if x == y and latest in 'ab':
        return 1
    if x == y and latest not in 'ab': 
        return 0
    if x>y:
        return 0
    
    return f(x+2,y,'a')+f(x+5,y,'b')+f(x*2,y,'c')

print(f(8,40))

"""
Прибавить 1.

Прибавить 2.

Умножить на 2.

Первая команда увеличивает число на 1, вторая — на 2, третья — вдвое. Программа для исполнителя — это последовательность команд.

 

Сколько существует таких программ, которые исходное число 3 преобразуют в число 25 и при этом в программе есть все три команды?
"""


# def f()